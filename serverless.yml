# NOTE: update this with your service name
service: slogansAPI

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: prod
  region: us-east-1

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:645983975082:table/nouns"
    - Effect: Allow
      Action:
        - ssm:GetParameter
        - ssm:GetParameters
      Resource: "arn:aws:ssm:us-east-1:645983975082:parameter/*"
    

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /nouns
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  create:
    handler: create.main
    events:
      - http:
          path: nouns
          method: post
          cors: true
          authorizer: aws_iam
  seedcreate:
    handler: seedCreate.main
    events:
      - http:
          path: nouns/seed
          method: post
          cors: true
          authorizer: aws_iam
  getnoun:
    handler: getnoun.main
    events:
      - http:
          path: nouns/{id}
          method: get
          cors: true
          authorizer: aws_iam
